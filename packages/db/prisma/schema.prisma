// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VideoStatus {
  PROCESSING
  ERROR
  READY
  DELETED
}

enum Visibility {
  DRAFT
  PRIVATE
  UNLISTED
  PUBLIC
}

enum Rate {
  LIKE
  DISLIKE
}

enum JobStatus {
  IN_PROGRESS
  DONE
  FAILED
}

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Public info
  nickname  String  @db.VarChar(100)
  picture   Image?  @relation("UserPicture", fields: [pictureId], references: [id])
  pictureId String? @unique @db.Uuid

  pictureSet   ImageSet @relation("UserPictureSet", fields: [pictureSetId], references: [id], onDelete: Cascade)
  pictureSetId String   @unique @db.Uuid

  subscriptions    User[] @relation("Subscriptions")
  subscribers      User[] @relation("Subscriptions")
  subscribersCount Int    @default(0)

  // Personal data
  firstName String? @db.VarChar(100)
  lastName  String? @db.VarChar(100)

  // Sign in by username/email & password
  username String? @unique
  email    String? @unique
  password String?

  roles Role[] @relation("UserRole")

  videos        Video[]        @relation("VideoOwner")
  images        Image[]        @relation("ImageOwner")
  ratings       Rating[]       @relation("UserRating")
  observedJobs  Job[]          @relation("JobObserver")
  notifications Notification[] @relation("UserNotification")

  @@map("users")
}

model Video {
  id          String    @id @default(uuid()) @db.Uuid
  cursor      Int       @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  title       String      @db.VarChar(255)
  description String?
  status      VideoStatus @default(PROCESSING)
  visibility  Visibility  @default(DRAFT)

  // Reactions & views
  viewsCount    Int      @default(0)
  likesCount    Int      @default(0)
  dislikesCount Int      @default(0)
  rates         Rating[] @relation("VideoRating")

  author   User   @relation("VideoOwner", fields: [authorId], references: [id])
  authorId String

  thumbnail      Image?   @relation("VideoThumbnail", fields: [thumbnailId], references: [id])
  thumbnailId    String?  @unique @db.Uuid
  thumbnailSet   ImageSet @relation("VideoThumbnailSet", fields: [thumbnailSetId], references: [id], onDelete: Cascade)
  thumbnailSetId String   @unique @db.Uuid

  master    File?   @relation("VideoMaster", fields: [masterId], references: [id])
  masterId  String? @unique @db.Uuid
  fileSet   FileSet @relation("VideoFilesSet", fields: [fileSetId], references: [id])
  fileSetId String  @unique @db.Uuid

  @@index([authorId])
  @@map("videos")
}

model Rating {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type Rate?

  user   User   @relation("UserRating", fields: [userId], references: [id])
  userId String

  video   Video  @relation("VideoRating", fields: [videoId], references: [id])
  videoId String @db.Uuid

  @@unique([userId, videoId])
  @@map("ratings")
}

model Image {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  originalWidth  Int
  originalHeight Int

  set   ImageSet? @relation(fields: [setId], references: [id])
  setId String?   @db.Uuid

  small      File   @relation("SmallImage", fields: [smallId], references: [id])
  smallId    String @unique @db.Uuid
  medium     File   @relation("MediumImage", fields: [mediumId], references: [id])
  mediumId   String @unique @db.Uuid
  large      File   @relation("LargeImage", fields: [largeId], references: [id])
  largeId    String @unique @db.Uuid
  original   File   @relation("OriginalImage", fields: [originalId], references: [id])
  originalId String @unique @db.Uuid

  ownerId String
  owner   User   @relation("ImageOwner", fields: [ownerId], references: [id])

  user  User?  @relation("UserPicture")
  video Video? @relation("VideoThumbnail")

  @@map("images")
}

model File {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  filename  String
  path      String
  publicUrl String

  smallImage    Image?   @relation("SmallImage")
  mediumImage   Image?   @relation("MediumImage")
  largeImage    Image?   @relation("LargeImage")
  originalImage Image?   @relation("OriginalImage")
  videoMaster   Video?   @relation("VideoMaster")
  fileSet       FileSet? @relation("FileSet", fields: [fileSetId], references: [id])
  fileSetId     String?  @db.Uuid

  @@map("files")
}

model ImageSet {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images Image[] @relation

  user  User?  @relation("UserPictureSet")
  video Video? @relation("VideoThumbnailSet")

  @@map("image_sets")
}

model FileSet {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video Video? @relation("VideoFilesSet")
  files File[] @relation("FileSet")

  @@map("file_sets")
}

model Role {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  users User[] @relation("UserRole")

  @@map("roles")
}

model Job {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  status      JobStatus @default(IN_PROGRESS)
  progress    Int       @default(0)
  stage       String?
  error       String?
  payload     Json

  observers User[] @relation("JobObserver")

  @@map("jobs")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String?
  payload     Json
  seen        Boolean @default(false)

  user   User   @relation("UserNotification", fields: [userId], references: [id])
  userId String

  @@map("notifications")
}
